IOC is available in the following two forms.
1.Dependency Lookup
2.Dependency Injection

1. dependency lookup : In Dependency Lookup, Service Provider will create the services and mainatined that
   services either in the regisry Softwares or in the containers , where we have to perform
   lookup operations inorder to get the required services.
2. Dependency Injection : IN this mechanism, Service Provider will create the services and inject the required services
   to the application directly with out performing lookup operations and with out getting
   request from client.



There are two ways to achieve dependency injection.
1.Constructor Dependency Injection
2.Setter Method Dependency Injection


1. constructor injection : first create parameterized constructor and config in configuration file
	
		public Course(String cid, String cname, int ccost){
           this.cid=cid;
           this.cname=cname;
		   this.ccost=ccost;
        }
		
		<bean id="crs" class="com.durgasoft.beans.Course">
            <constructor-arg value="C-111"/>
            <constructor-arg value="JAVA"/>
            <constructor-arg value="5000"/>
        </bean>
		
		
2. If we inject dependent values to the Bean through setXXX() methods then it is called as "Setter Method Dependency Injection"

	for string and primitive variable use value attribute and for reference variable use ref attributes

	<bean id="emp" class="com.durgasoft.beans.Employee">
      <property name="eid" value="E-111" />
      <property name="ename" value="Durga"/>
      <property name="esal" value="50000"/>
      <property name="eaddr" value="Hyd"/>
      <property name="acc" ref="acc"/>
    </bean> 
	
	<property name="--">
		<list>
			<value>value1</value>
			<value>value2</value>
			----
			----
		</list>
	</property>
	
	<property name="--">
		<set>
			<value>value1</value>
			<value>value2</value>
			----
			----
		</set>
	</property>
	
	<property name="--">
		<map>
			<entry key="key1" value="value1"/>
			<entry key="key2" value="value2"/>
			----
		</map>
	</property>
	
	
	<property name="--">
		<props>
			<prop key="key1"> value1</prop>
			<prop key="key2"> value2</prop>
			----
		</props>
	</property>
	
	
	
1. In Constructor dependency injection, dependent values injected through a particular
constructor.
In Setter method dependency injection, dependent values are injected through properties
respective setXXX() methods.

2.In Constructor Dependency Injection readability is not good , because, in Constructor
dependency injection we are unable to identify to which property we are injecting
dependent values.
In setter method Dependency injection Readability is very good, because, in Setter method
Dependency injection we are able to identify that to property we are able to inject the
dependent values.

3.In Constructor Dependency injection , dependency injection is possible when all
dependent objects are getting ready,if dependent objects are not ready then Constructor
dependency injection is not possible.
In Setter method dependency injection, even though dependent values are not ready,
Setter method dependency injection will be performed.

4.In case of constructor dependency injection ,partial dependency injection is not possible,
because, we have to access the constructor by passing the required no of parameter
values.
In case of setter method dependency injection, partial dependency injection is possible ,
because, we are able to access setXXX() method individually.

5.IN case of constructor dependency injection, it is not simple to change the values in bean
object.
In case of Setter method dependency injection , it is very simple to change the values in
bean object.

6.In Constructor dependency injection, for every change on values a new bean object is
created, because, for every change we have to call constructor explicitly.
In Setter method dependency injection, for every change on values new object is not
created, because, for every change we can access setXXX() method explicitly.

7.Constructor dependency injection will make the bean object as "Immutable Object".
Setter method dependency injection will make the bean object as "mutable Object".

8.If we provide both Constructor and setter method dependency injection to a single bean
object then setter method dependency injection overrides constructor dependency
injection, but, constructor dependency injection is not overriding setter cmethod
dependency injection.

9.Constructor dependency injection may provide circular dependency injection.
Setter method dependency injection will not provide circular dependency injection.

10.Constuctor dependency injection will give guarantee for dependency injection.
Setter method dependency injection will not give guarantee for dependency injection.
11.In Spring applications, if we have more no of elements to inject then it is suggestible to
use Constructor dependency injection instead of setter method dependency injection.
	
	


